{"version":3,"file":"react-tabs.production.min.js","sources":["../src/helpers/elementTypes.js","../src/helpers/childrenDeepMap.js","../node_modules/clsx/dist/clsx.m.js","../src/helpers/uuid.js","../src/components/UncontrolledTabs.js","../src/helpers/count.js","../src/components/Tabs.js","../src/components/TabList.js","../src/components/Tab.js","../src/components/TabPanel.js"],"sourcesContent":["function makeTypeChecker(tabsRole) {\n  return (element) => !!element.type && element.type.tabsRole === tabsRole;\n}\n\nexport const isTab = makeTypeChecker('Tab');\nexport const isTabList = makeTypeChecker('TabList');\nexport const isTabPanel = makeTypeChecker('TabPanel');\n","import { Children, cloneElement } from 'react';\nimport { isTabPanel, isTab, isTabList } from './elementTypes';\n\nfunction isTabChild(child) {\n  return isTab(child) || isTabList(child) || isTabPanel(child);\n}\n\nexport function deepMap(children, callback) {\n  return Children.map(children, (child) => {\n    // null happens when conditionally rendering TabPanel/Tab\n    // see https://github.com/reactjs/react-tabs/issues/37\n    if (child === null) return null;\n\n    if (isTabChild(child)) {\n      return callback(child);\n    }\n\n    if (\n      child.props &&\n      child.props.children &&\n      typeof child.props.children === 'object'\n    ) {\n      // Clone the child that has children and map them too\n      return cloneElement(child, {\n        ...child.props,\n        children: deepMap(child.props.children, callback),\n      });\n    }\n\n    return child;\n  });\n}\n\nexport function deepForEach(children, callback) {\n  return Children.forEach(children, (child) => {\n    // null happens when conditionally rendering TabPanel/Tab\n    // see https://github.com/reactjs/react-tabs/issues/37\n    if (child === null) return;\n\n    if (isTab(child) || isTabPanel(child)) {\n      callback(child);\n    } else if (\n      child.props &&\n      child.props.children &&\n      typeof child.props.children === 'object'\n    ) {\n      if (isTabList(child)) callback(child);\n      deepForEach(child.props.children, callback);\n    }\n  });\n}\n","function toVal(mix) {\n\tvar k, y, str='';\n\tif (mix) {\n\t\tif (typeof mix === 'object') {\n\t\t\tif (Array.isArray(mix)) {\n\t\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\t\tif (mix[k] && (y = toVal(mix[k]))) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (k in mix) {\n\t\t\t\t\tif (mix[k] && (y = toVal(k))) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (typeof mix !== 'boolean' && !mix.call) {\n\t\t\tstr && (str += ' ');\n\t\t\tstr += mix;\n\t\t}\n\t}\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (x = toVal(arguments[i++])) {\n\t\t\tstr && (str += ' ');\n\t\t\tstr += x\n\t\t}\n\t}\n\treturn str;\n}\n","// Get a universally unique identifier\nlet count = 0;\nexport default function uuid() {\n  return `react-tabs-${count++}`;\n}\n\nexport function reset() {\n  count = 0;\n}\n","import PropTypes from 'prop-types';\nimport React, { cloneElement, Component } from 'react';\nimport cx from 'clsx';\nimport uuid from '../helpers/uuid';\nimport { childrenPropType } from '../helpers/propTypes';\nimport { getPanelsCount, getTabsCount } from '../helpers/count';\nimport { deepMap } from '../helpers/childrenDeepMap';\nimport { isTabList, isTabPanel, isTab } from '../helpers/elementTypes';\n\nfunction isNode(node) {\n  return node && 'getAttribute' in node;\n}\n\n// Determine if a node from event.target is a Tab element\nfunction isTabNode(node) {\n  return isNode(node) && node.getAttribute('role') === 'tab';\n}\n\n// Determine if a tab node is disabled\nfunction isTabDisabled(node) {\n  return isNode(node) && node.getAttribute('aria-disabled') === 'true';\n}\n\nlet canUseActiveElement;\ntry {\n  canUseActiveElement = !!(\n    typeof window !== 'undefined' &&\n    window.document &&\n    window.document.activeElement\n  );\n} catch (e) {\n  // Work around for IE bug when accessing document.activeElement in an iframe\n  // Refer to the following resources:\n  // http://stackoverflow.com/a/10982960/369687\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12733599\n  canUseActiveElement = false;\n}\nexport default class UncontrolledTabs extends Component {\n  static defaultProps = {\n    className: 'react-tabs',\n    focus: false,\n  };\n\n  static propTypes = {\n    children: childrenPropType,\n    direction: PropTypes.oneOf(['rtl', 'ltr']),\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    disabledTabClassName: PropTypes.string,\n    domRef: PropTypes.func,\n    focus: PropTypes.bool,\n    forceRenderTabPanel: PropTypes.bool,\n    onSelect: PropTypes.func.isRequired,\n    selectedIndex: PropTypes.number.isRequired,\n    selectedTabClassName: PropTypes.string,\n    selectedTabPanelClassName: PropTypes.string,\n  };\n\n  tabNodes = [];\n\n  setSelected(index, event) {\n    // Check index boundary\n    if (index < 0 || index >= this.getTabsCount()) return;\n\n    const { onSelect, selectedIndex } = this.props;\n\n    // Call change event handler\n    onSelect(index, selectedIndex, event);\n  }\n\n  getNextTab(index) {\n    const count = this.getTabsCount();\n\n    // Look for non-disabled tab from index to the last tab on the right\n    for (let i = index + 1; i < count; i++) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    // If no tab found, continue searching from first on left to index\n    for (let i = 0; i < index; i++) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    // No tabs are disabled, return index\n    return index;\n  }\n\n  getPrevTab(index) {\n    let i = index;\n\n    // Look for non-disabled tab from index to first tab on the left\n    while (i--) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    // If no tab found, continue searching from last tab on right to index\n    i = this.getTabsCount();\n    while (i-- > index) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    // No tabs are disabled, return index\n    return index;\n  }\n\n  getFirstTab() {\n    const count = this.getTabsCount();\n\n    // Look for non disabled tab from the first tab\n    for (let i = 0; i < count; i++) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  getLastTab() {\n    let i = this.getTabsCount();\n\n    // Look for non disabled tab from the last tab\n    while (i--) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  getTabsCount() {\n    const { children } = this.props;\n    return getTabsCount(children);\n  }\n\n  getPanelsCount() {\n    const { children } = this.props;\n    return getPanelsCount(children);\n  }\n\n  getTab(index) {\n    return this.tabNodes[`tabs-${index}`];\n  }\n\n  getChildren() {\n    let index = 0;\n    const {\n      children,\n      disabledTabClassName,\n      focus,\n      forceRenderTabPanel,\n      selectedIndex,\n      selectedTabClassName,\n      selectedTabPanelClassName,\n    } = this.props;\n\n    this.tabIds = this.tabIds || [];\n    this.panelIds = this.panelIds || [];\n    let diff = this.tabIds.length - this.getTabsCount();\n\n    // Add ids if new tabs have been added\n    // Don't bother removing ids, just keep them in case they are added again\n    // This is more efficient, and keeps the uuid counter under control\n    while (diff++ < 0) {\n      this.tabIds.push(uuid());\n      this.panelIds.push(uuid());\n    }\n\n    // Map children to dynamically setup refs\n    return deepMap(children, (child) => {\n      let result = child;\n\n      // Clone TabList and Tab components to have refs\n      if (isTabList(child)) {\n        let listIndex = 0;\n\n        // Figure out if the current focus in the DOM is set on a Tab\n        // If it is we should keep the focus on the next selected tab\n        let wasTabFocused = false;\n\n        if (canUseActiveElement) {\n          wasTabFocused = React.Children.toArray(child.props.children)\n            .filter(isTab)\n            .some((tab, i) => document.activeElement === this.getTab(i));\n        }\n\n        result = cloneElement(child, {\n          children: deepMap(child.props.children, (tab) => {\n            const key = `tabs-${listIndex}`;\n            const selected = selectedIndex === listIndex;\n\n            const props = {\n              tabRef: (node) => {\n                this.tabNodes[key] = node;\n              },\n              id: this.tabIds[listIndex],\n              panelId: this.panelIds[listIndex],\n              selected,\n              focus: selected && (focus || wasTabFocused),\n            };\n\n            if (selectedTabClassName)\n              props.selectedClassName = selectedTabClassName;\n            if (disabledTabClassName)\n              props.disabledClassName = disabledTabClassName;\n\n            listIndex++;\n\n            return cloneElement(tab, props);\n          }),\n        });\n      } else if (isTabPanel(child)) {\n        const props = {\n          id: this.panelIds[index],\n          tabId: this.tabIds[index],\n          selected: selectedIndex === index,\n        };\n\n        if (forceRenderTabPanel) props.forceRender = forceRenderTabPanel;\n        if (selectedTabPanelClassName)\n          props.selectedClassName = selectedTabPanelClassName;\n\n        index++;\n\n        result = cloneElement(child, props);\n      }\n\n      return result;\n    });\n  }\n\n  handleKeyDown = (e) => {\n    const { direction } = this.props;\n    if (this.isTabFromContainer(e.target)) {\n      let { selectedIndex: index } = this.props;\n      let preventDefault = false;\n      let useSelectedIndex = false;\n\n      if (e.keyCode === 32 || e.keyCode === 13) {\n        preventDefault = true;\n        useSelectedIndex = false;\n        this.handleClick(e);\n      }\n\n      if (e.keyCode === 37 || e.keyCode === 38) {\n        // Select next tab to the left\n        if (direction === 'rtl') {\n          index = this.getNextTab(index);\n        } else {\n          index = this.getPrevTab(index);\n        }\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 39 || e.keyCode === 40) {\n        // Select next tab to the right\n        if (direction === 'rtl') {\n          index = this.getPrevTab(index);\n        } else {\n          index = this.getNextTab(index);\n        }\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 35) {\n        // Select last tab (End key)\n        index = this.getLastTab();\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 36) {\n        // Select first tab (Home key)\n        index = this.getFirstTab();\n        preventDefault = true;\n        useSelectedIndex = true;\n      }\n\n      // This prevents scrollbars from moving around\n      if (preventDefault) {\n        e.preventDefault();\n      }\n\n      // Only use the selected index in the state if we're not using the tabbed index\n      if (useSelectedIndex) {\n        this.setSelected(index, e);\n      }\n    }\n  };\n\n  handleClick = (e) => {\n    let node = e.target;\n    do {\n      if (this.isTabFromContainer(node)) {\n        if (isTabDisabled(node)) {\n          return;\n        }\n\n        const index = [].slice\n          .call(node.parentNode.children)\n          .filter(isTabNode)\n          .indexOf(node);\n        this.setSelected(index, e);\n        return;\n      }\n      // eslint-disable-next-line no-cond-assign\n    } while ((node = node.parentNode) != null);\n  };\n\n  /**\n   * Determine if a node from event.target is a Tab element for the current Tabs container.\n   * If the clicked element is not a Tab, it returns false.\n   * If it finds another Tabs container between the Tab and `this`, it returns false.\n   */\n  isTabFromContainer(node) {\n    // return immediately if the clicked element is not a Tab.\n    if (!isTabNode(node)) {\n      return false;\n    }\n\n    // Check if the first occurrence of a Tabs container is `this` one.\n    let nodeAncestor = node.parentElement;\n    do {\n      if (nodeAncestor === this.node) return true;\n      if (nodeAncestor.getAttribute('data-tabs')) break;\n\n      nodeAncestor = nodeAncestor.parentElement;\n    } while (nodeAncestor);\n\n    return false;\n  }\n\n  render() {\n    // Delete all known props, so they don't get added to DOM\n    const {\n      children, // unused\n      className,\n      disabledTabClassName, // unused\n      domRef,\n      focus, // unused\n      forceRenderTabPanel, // unused\n      onSelect, // unused\n      selectedIndex, // unused\n      selectedTabClassName, // unused\n      selectedTabPanelClassName, // unused\n      ...attributes\n    } = this.props;\n\n    return (\n      <div\n        {...attributes}\n        className={cx(className)}\n        onClick={this.handleClick}\n        onKeyDown={this.handleKeyDown}\n        ref={(node) => {\n          this.node = node;\n          if (domRef) domRef(node);\n        }}\n        data-tabs\n      >\n        {this.getChildren()}\n      </div>\n    );\n  }\n}\n","import { deepForEach } from './childrenDeepMap';\nimport { isTab, isTabPanel } from './elementTypes';\n\nexport function getTabsCount(children) {\n  let tabCount = 0;\n  deepForEach(children, (child) => {\n    if (isTab(child)) tabCount++;\n  });\n\n  return tabCount;\n}\n\nexport function getPanelsCount(children) {\n  let panelCount = 0;\n  deepForEach(children, (child) => {\n    if (isTabPanel(child)) panelCount++;\n  });\n\n  return panelCount;\n}\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n  childrenPropType,\n  onSelectPropType,\n  selectedIndexPropType,\n} from '../helpers/propTypes';\nimport UncontrolledTabs from './UncontrolledTabs';\nimport { getTabsCount } from '../helpers/count';\n\nconst MODE_CONTROLLED = 0;\nconst MODE_UNCONTROLLED = 1;\n\nexport default class Tabs extends Component {\n  static defaultProps = {\n    defaultFocus: false,\n    forceRenderTabPanel: false,\n    selectedIndex: null,\n    defaultIndex: null,\n  };\n\n  static propTypes = {\n    children: childrenPropType,\n    direction: PropTypes.oneOf(['rtl', 'ltr']),\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    defaultFocus: PropTypes.bool,\n    defaultIndex: PropTypes.number,\n    disabledTabClassName: PropTypes.string,\n    domRef: PropTypes.func,\n    forceRenderTabPanel: PropTypes.bool,\n    onSelect: onSelectPropType,\n    selectedIndex: selectedIndexPropType,\n    selectedTabClassName: PropTypes.string,\n    selectedTabPanelClassName: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = Tabs.copyPropsToState(this.props, {}, props.defaultFocus);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return Tabs.copyPropsToState(props, state);\n  }\n\n  static getModeFromProps(props) {\n    return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;\n  }\n\n  handleSelected = (index, last, event) => {\n    const { onSelect } = this.props;\n    const { mode } = this.state;\n\n    // Call change event handler\n    if (typeof onSelect === 'function') {\n      // Check if the change event handler cancels the tab change\n      if (onSelect(index, last, event) === false) return;\n    }\n\n    const state = {\n      // Set focus if the change was triggered from the keyboard\n      focus: event.type === 'keydown',\n    };\n\n    if (mode === MODE_UNCONTROLLED) {\n      // Update selected index\n      state.selectedIndex = index;\n    }\n\n    this.setState(state);\n  };\n\n  // preserve the existing selectedIndex from state.\n  // If the state has not selectedIndex, default to the defaultIndex or 0\n  static copyPropsToState(props, state, focus = false) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      state.mode !== undefined &&\n      state.mode !== Tabs.getModeFromProps(props)\n    ) {\n      throw new Error(\n        `Switching between controlled mode (by using \\`selectedIndex\\`) and uncontrolled mode is not supported in \\`Tabs\\`.\nFor more information about controlled and uncontrolled mode of react-tabs see the README.`,\n      );\n    }\n\n    const newState = {\n      focus,\n      mode: Tabs.getModeFromProps(props),\n    };\n\n    if (newState.mode === MODE_UNCONTROLLED) {\n      const maxTabIndex = getTabsCount(props.children) - 1;\n      let selectedIndex = null;\n\n      if (state.selectedIndex != null) {\n        selectedIndex = Math.min(state.selectedIndex, maxTabIndex);\n      } else {\n        selectedIndex = props.defaultIndex || 0;\n      }\n      newState.selectedIndex = selectedIndex;\n    }\n\n    return newState;\n  }\n\n  render() {\n    const { children, defaultIndex, defaultFocus, ...props } = this.props;\n    const { focus, selectedIndex } = this.state;\n\n    props.focus = focus;\n    props.onSelect = this.handleSelected;\n\n    if (selectedIndex != null) {\n      props.selectedIndex = selectedIndex;\n    }\n\n    return <UncontrolledTabs {...props}>{children}</UncontrolledTabs>;\n  }\n}\n\nTabs.tabsRole = 'Tabs';\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport cx from 'clsx';\n\nexport default class TabList extends Component {\n  static defaultProps = {\n    className: 'react-tabs__tab-list',\n  };\n\n  static propTypes = {\n    children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n  };\n\n  render() {\n    const { children, className, ...attributes } = this.props;\n\n    return (\n      <ul {...attributes} className={cx(className)} role=\"tablist\">\n        {children}\n      </ul>\n    );\n  }\n}\n\nTabList.tabsRole = 'TabList';\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport cx from 'clsx';\n\nconst DEFAULT_CLASS = 'react-tabs__tab';\n\nexport default class Tab extends Component {\n  static defaultProps = {\n    className: DEFAULT_CLASS,\n    disabledClassName: `${DEFAULT_CLASS}--disabled`,\n    focus: false,\n    id: null,\n    panelId: null,\n    selected: false,\n    selectedClassName: `${DEFAULT_CLASS}--selected`,\n  };\n\n  static propTypes = {\n    children: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.object,\n      PropTypes.string,\n    ]),\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    disabled: PropTypes.bool,\n    tabIndex: PropTypes.string,\n    disabledClassName: PropTypes.string,\n    focus: PropTypes.bool, // private\n    id: PropTypes.string, // private\n    panelId: PropTypes.string, // private\n    selected: PropTypes.bool, // private\n    selectedClassName: PropTypes.string,\n    tabRef: PropTypes.func, // private\n  };\n\n  componentDidMount() {\n    this.checkFocus();\n  }\n\n  componentDidUpdate() {\n    this.checkFocus();\n  }\n\n  checkFocus() {\n    const { selected, focus } = this.props;\n    if (selected && focus) {\n      this.node.focus();\n    }\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      disabled,\n      disabledClassName,\n      focus, // unused\n      id,\n      panelId,\n      selected,\n      selectedClassName,\n      tabIndex,\n      tabRef,\n      ...attributes\n    } = this.props;\n\n    return (\n      <li\n        {...attributes}\n        className={cx(className, {\n          [selectedClassName]: selected,\n          [disabledClassName]: disabled,\n        })}\n        ref={(node) => {\n          this.node = node;\n          if (tabRef) tabRef(node);\n        }}\n        role=\"tab\"\n        id={id}\n        aria-selected={selected ? 'true' : 'false'}\n        aria-disabled={disabled ? 'true' : 'false'}\n        aria-controls={panelId}\n        tabIndex={tabIndex || (selected ? '0' : null)}\n      >\n        {children}\n      </li>\n    );\n  }\n}\n\nTab.tabsRole = 'Tab';\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport cx from 'clsx';\n\nconst DEFAULT_CLASS = 'react-tabs__tab-panel';\n\nexport default class TabPanel extends Component {\n  static defaultProps = {\n    className: DEFAULT_CLASS,\n    forceRender: false,\n    selectedClassName: `${DEFAULT_CLASS}--selected`,\n  };\n\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    forceRender: PropTypes.bool,\n    id: PropTypes.string, // private\n    selected: PropTypes.bool, // private\n    selectedClassName: PropTypes.string,\n    tabId: PropTypes.string, // private\n  };\n\n  render() {\n    const {\n      children,\n      className,\n      forceRender,\n      id,\n      selected,\n      selectedClassName,\n      tabId,\n      ...attributes\n    } = this.props;\n\n    return (\n      <div\n        {...attributes}\n        className={cx(className, {\n          [selectedClassName]: selected,\n        })}\n        role=\"tabpanel\"\n        id={id}\n        aria-labelledby={tabId}\n      >\n        {forceRender || selected ? children : null}\n      </div>\n    );\n  }\n}\n\nTabPanel.tabsRole = 'TabPanel';\n"],"names":["makeTypeChecker","tabsRole","element","type","isTab","isTabList","isTabPanel","deepMap","children","callback","Children","map","child","isTabChild","props","cloneElement","deepForEach","forEach","toVal","mix","k","y","str","Array","isArray","length","call","x","i","arguments","canUseActiveElement","count","uuid","getTabsCount","tabCount","isNode","node","isTabNode","getAttribute","isTabDisabled","window","document","activeElement","e","UncontrolledTabs","tabNodes","handleKeyDown","direction","_this","isTabFromContainer","target","index","selectedIndex","preventDefault","useSelectedIndex","keyCode","handleClick","getNextTab","getPrevTab","getLastTab","getFirstTab","setSelected","slice","parentNode","filter","indexOf","event","this","onSelect","getTab","getPanelsCount","panelCount","getChildren","disabledTabClassName","focus","forceRenderTabPanel","selectedTabClassName","selectedTabPanelClassName","tabIds","panelIds","diff","push","result","listIndex","wasTabFocused","React","toArray","some","tab","_this2","key","selected","tabRef","id","panelId","selectedClassName","disabledClassName","tabId","forceRender","nodeAncestor","parentElement","render","className","domRef","attributes","cx","onClick","onKeyDown","ref","_this3","Component","defaultProps","Tabs","handleSelected","last","mode","state","setState","copyPropsToState","defaultFocus","getDerivedStateFromProps","getModeFromProps","newState","maxTabIndex","Math","min","defaultIndex","TabList","role","Tab","componentDidMount","checkFocus","componentDidUpdate","disabled","tabIndex","DEFAULT_CLASS","TabPanel"],"mappings":"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"}