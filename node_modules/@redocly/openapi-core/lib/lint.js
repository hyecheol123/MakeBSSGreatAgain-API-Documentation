"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.openAPIMajor = exports.detectOpenAPI = exports.lintDocument = exports.lint = exports.OasMajorVersion = exports.OasVersion = void 0;
const resolve_1 = require("./resolve");
const visitors_1 = require("./visitors");
const oas3_1 = require("./types/oas3");
const oas2_1 = require("./types/oas2");
const walk_1 = require("./walk");
const types_1 = require("./types");
const rules_1 = require("./config/rules");
const ajv_1 = require("./rules/ajv");
var OasVersion;
(function (OasVersion) {
    OasVersion["Version2"] = "oas2";
    OasVersion["Version3_0"] = "oas3_0";
})(OasVersion = exports.OasVersion || (exports.OasVersion = {}));
var OasMajorVersion;
(function (OasMajorVersion) {
    OasMajorVersion["Version2"] = "oas2";
    OasMajorVersion["Version3"] = "oas3";
})(OasMajorVersion = exports.OasMajorVersion || (exports.OasMajorVersion = {}));
function lint(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { ref, externalRefResolver = new resolve_1.BaseResolver(opts.config.resolve) } = opts;
        const document = (yield externalRefResolver.resolveDocument(null, ref));
        return lintDocument(Object.assign(Object.assign({ document }, opts), { externalRefResolver, config: opts.config.lint }));
    });
}
exports.lint = lint;
function lintDocument(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        ajv_1.releaseAjvInstance(); // FIXME: preprocessors can modify nodes which are then cached to ajv-instance by absolute path
        const { document, customTypes, externalRefResolver, config } = opts;
        const oasVersion = detectOpenAPI(document.parsed);
        const oasMajorVersion = openAPIMajor(oasVersion);
        const rules = config.getRulesForOasVersion(oasMajorVersion);
        const types = types_1.normalizeTypes(config.extendTypes((customTypes !== null && customTypes !== void 0 ? customTypes : oasMajorVersion === OasMajorVersion.Version3) ? oas3_1.Oas3Types : oas2_1.Oas2Types, oasVersion));
        const ctx = {
            problems: [],
            oasVersion: oasVersion,
        };
        const preprocessors = rules_1.initRules(rules, config, 'preprocessors', oasVersion);
        const regularRules = rules_1.initRules(rules, config, 'rules', oasVersion);
        //@ts-ignore
        const normalizedVisitors = visitors_1.normalizeVisitors([...preprocessors, ...regularRules], types);
        const resolvedRefMap = yield resolve_1.resolveDocument({
            rootDocument: document,
            rootType: types.DefinitionRoot,
            externalRefResolver,
        });
        walk_1.walkDocument({
            document,
            rootType: types.DefinitionRoot,
            normalizedVisitors,
            resolvedRefMap,
            ctx,
        });
        return ctx.problems.map((problem) => config.addProblemToIgnore(problem));
    });
}
exports.lintDocument = lintDocument;
function detectOpenAPI(root) {
    if (typeof root !== 'object') {
        throw new Error(`Document must be JSON object, got ${typeof root}`);
    }
    if (!(root.openapi || root.swagger)) {
        throw new Error('This doesnâ€™t look like an OpenAPI document.\n');
    }
    if (root.openapi && root.openapi.startsWith('3.0')) {
        return OasVersion.Version3_0;
    }
    if (root.swagger && root.swagger === '2.0') {
        return OasVersion.Version2;
    }
    throw new Error(`Unsupported OpenAPI Version: ${root.openapi || root.swagger}`);
}
exports.detectOpenAPI = detectOpenAPI;
function openAPIMajor(version) {
    if (version === OasVersion.Version2) {
        return OasMajorVersion.Version2;
    }
    else {
        return OasMajorVersion.Version3;
    }
}
exports.openAPIMajor = openAPIMajor;
