"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleLint = void 0;
const openapi_core_1 = require("@redocly/openapi-core");
const utils_1 = require("../utils");
const colorette_1 = require("colorette");
const perf_hooks_1 = require("perf_hooks");
function handleLint(argv, version) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = yield openapi_core_1.loadConfig(argv.config, argv.extends);
        config.lint.skipRules(argv['skip-rule']);
        config.lint.skipPreprocessors(argv['skip-preprocessor']);
        const entrypoints = yield utils_1.getFallbackEntryPointsOrExit(argv.entrypoints, config);
        if (argv['generate-ignore-file']) {
            config.lint.ignore = {}; // clear ignore
        }
        const totals = { errors: 0, warnings: 0, ignored: 0 };
        let totalIgnored = 0;
        if (config.lint.recommendedFallback) {
            process.stderr.write(`No configurations were defined in extends -- using built in ${colorette_1.blue('recommended')} configuration by default.\n\n`);
        }
        // TODO: use shared externalRef resolver, blocked by preprocessors now as they can mutate documents
        for (const entryPoint of entrypoints) {
            try {
                const startedAt = perf_hooks_1.performance.now();
                process.stderr.write(colorette_1.gray(`validating ${entryPoint}...\n`));
                const results = yield openapi_core_1.lint({
                    ref: entryPoint,
                    config,
                });
                const fileTotals = utils_1.getTotals(results);
                totals.errors += fileTotals.errors;
                totals.warnings += fileTotals.warnings;
                totals.ignored += fileTotals.ignored;
                if (argv['generate-ignore-file']) {
                    for (let m of results) {
                        config.lint.addIgnore(m);
                        totalIgnored++;
                    }
                }
                else {
                    openapi_core_1.formatProblems(results, {
                        format: argv.format,
                        maxProblems: argv['max-problems'],
                        totals: fileTotals,
                        version
                    });
                }
                const elapsed = utils_1.getExecutionTime(startedAt);
                process.stderr.write(colorette_1.gray(`${entryPoint}: validated in ${elapsed}\n\n`));
            }
            catch (e) {
                totals.errors++;
                utils_1.handleError(e, entryPoint);
            }
        }
        if (argv['generate-ignore-file']) {
            config.lint.saveIgnore();
            process.stderr.write(`Generated ignore file with ${totalIgnored} ${utils_1.pluralize('problem', totalIgnored)}.\n\n`);
        }
        else {
            utils_1.printLintTotals(totals, entrypoints.length);
        }
        utils_1.printUnusedWarnings(config.lint);
        process.exit(totals.errors === 0 || argv['generate-ignore-file'] ? 0 : 1);
    });
}
exports.handleLint = handleLint;
