openapi: 3.0.3
info:
  version: 1.0.0
  title: Make BSS Great Again (bshs.or.kr)
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  termsOfService: 'https://bshs.or.kr/terms/'
  contact:
    email: hyecheol123@gmail.com
    url: 'http://bshs.or.kr/contact'
  x-logo:
    url: 'https://redocly.github.io/openapi-template/logo.png'
  description:
    $ref: description/main.md
externalDocs:
  description: GitHub repository for this API Documentation.
  url: 'https://github.com/hyecheol123/MakeBSSGreatAgin_API_Documentation'
tags:
  - name: Auth
    description: Authorization/Authentication operations
  - name: User
    description: User account related operations
  - name: Board
    description: Articles/Threads/Posts related operations
  - name: Comment
    description: Comments related operations
servers:
  - url: 'https://bshs.or.kr/api/v1'
paths:
  # auth APIs
  /auth/login:
    post:
      $ref: paths/auth/login/post.yaml
  /auth/logout:
    delete:
      $ref: paths/auth/logout/delete.yaml
  /auth/logout/other-sessions:
    delete:
      $ref: paths/auth/logout/other-sessions/delete.yaml
  /auth/renew:
    get:
      $ref: paths/auth/renew/get.yaml
  # user APIs
  /user:
    post: # New user
      $ref: paths/user/post.yaml
    # get: # TODO: Retrieve list of Users - Search user by passing arguments to query string / Also need to handle promotion
    #   $ref:
  /user/{username}:
    get: # Retrieve user information
      $ref: paths/user/{username}/get.yaml
    put: # Update user information
      $ref: paths/user/{username}/put.yaml
  /user/new-password/{username}:
    post: # Change Password
      $ref: paths/user/new-password/{username}/post.yaml
  /user/verify-email:
    post: # Create verification ticket
      $ref: paths/user/verify-email/post.yaml
  /user/verify-email/{ticketID}:
    put: # Verify Email
      $ref: paths/user/verify-email/{ticketID}/put.yaml
  /user/find-username:
    get:
      $ref: paths/user/find-username/get.yaml
  /user/find-username/email:
    post: # Send username to user's email
      $ref: paths/user/find-username/email/post.yaml
  /user/password-reset:
    post: # Send password reset ticket/link to user's email
      $ref: paths/user/password-reset/post.yaml
  /user/password-reset/{ticketID}:
    put: # Use password reset ticket to reset the password
      $ref: paths/user/password-reset/{ticketID}/put.yaml
  /user/report/{username}:
    post: # Report fake/spam user to admin
      $ref: paths/user/report/{username}/post.yaml
  # /user/promote:
  #   get: # TODO: get instant-promote challenges
  #     $ref:
  #   post: # TODO: send the answer of challenges, get the result back.
  #     $ref:
  /user/promote/{username}:
    post: # Other user to upvote this user to be promoted (verify as a real alumni).
      $ref: paths/user/promote/{username}/post.yaml
  #   get: # TODO: retrieve list of upvoters.
  #     $ref:
  #   delete: # TODO: Cancel upvote
  #     $ref:
  # board APIs
  /board:
    post: # Make new post and write
      $ref: paths/board/post.yaml
    get: # Retrieve list of articles / Support searching by using QueryString
      $ref: paths/board/get.yaml
  /board/category:
    post: # Create new category
      $ref: paths/board/category/post.yaml
    get: # Retrieve list of categories
      $ref: paths/board/category/get.yaml
  /board/category/{categoryName}:
    delete: # Remove category
      $ref: paths/board/category/{categoryName}/delete.yaml
  /board/{postID}:
    delete: # Delete a post
      $ref: paths/board/{postID}/delete.yaml
    put: # Revise a post
      $ref: paths/board/{postID}/put.yaml
    get: # Retrieve a post
      $ref: paths/board/{postID}/get.yaml
  /board/like/{postID}:
    post: # Press the like button
      $ref: paths/board/like/{postID}/post.yaml
    delete: # Un-press the like button
      $ref: paths/board/like/{postID}/delete.yaml
    get: # Retrieve the number of likes
      $ref: paths/board/like/{postID}/get.yaml
  /board/report/{postID}:
    post: # Report harmful article to admin
      $ref: paths/board/report/{postID}/post.yaml
  # comment APIs
  /comment:
    post:  # New comment
      $ref: paths/comment/post.yaml
    get: # Retrieve comment - use page to divide long result
      $ref: paths/comment/get.yaml
  /comment/{commentID}:
    delete: # Delete single comment
      $ref: paths/comment/{commentID}/delete.yaml
    put: # Update single comment
      $ref: paths/comment/{commentID}/put.yaml
  /comment/report/{commentID}:
    post: # Report harmful comment to admin
      $ref: paths/comment/report/{commentID}/post.yaml
components:
  securitySchemes:
    idPassword:
      type: http
      scheme: basic
      description: |
        Basic Authentication will be used to **retrieve tokens**.
        For security reasons, the maximum number of trying signin will be limited.
        If user failed to login 5 consecutive times, the account will be locked.
        It requires `Authorization` headers that contains the word `Basic` followed by a space and a base64-encoded string `username:password`.
    accessToken:
      type: apiKey
      in: cookie
      name: X-ACCESS-TOKEN
      description: |
        Access token will be used to **authenticate/authorize user to use the API**.
    refreshToken:
      type: apiKey
      in: cookie
      name: X-REFRESH-TOKEN
      description: |
        Refresh token will be used to **renew expired access token**.
        If the refresh token also expired, the user need to login again by using basic authentication.
