openapi: 3.0.3
info:
  version: 1.0.0
  title: Make BSS Great Again (bshs.or.kr)
  license:
    name: BSD-3-Clause
    url: 'https://opensource.org/licenses/BSD-3-Clause'
  termsOfService: 'https://bshs.or.kr/terms/'
  contact:
    email: hyecheol123@gmail.com
    url: 'http://bshs.or.kr/contact'
  x-logo:
    url: 'https://redocly.github.io/openapi-template/logo.png'
  description: >-
    This is the tentative API specification for **Busan Science High School
    Alumni Website, *Make BSS Great Again***.

    Note that this project does not have any official relationship between Busan
    Science High School.

    Therefore, if you have any questions/suggestions/complaints, please contact
    our team with the email or contact information listed above.


    # Get Started

    All API calls require secured connection (only HTTPS).

    To use the APIs, the users need to retrieve access token by signin with
    username and password (basic authentication).

    As of now, we do not support multi-factor authentication, but before we
    service the application/website MFA will be supported.


    Details of the Security Schemes are described below.


    # SecuritySchemes

    <SecurityDefinitions />
externalDocs:
  description: GitHub repository for this API Documentation.
  url: 'https://github.com/hyecheol123/MakeBSSGreatAgin_API_Documentation'
tags:
  - name: Auth
    description: Authorization/Authentication operations
servers:
  - url: 'https://bshs.or.kr/api/v1'
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      operationId: login
      description: |
        Login with username and password to retrieve access/refresh tokens
      security:
        - idPassword: []
      responses:
        '200':
          description: Successfully signed in
          headers:
            Set-Cookie:
              $ref: '#/components/headers/setCookieAccessToken'
            "\0Set-Cookie":
              $ref: '#/components/headers/setCookieRefreshToken'
        '401':
          $ref: '#/components/responses/unauthorized'
  /auth/logout:
    delete:
      tags:
        - Auth
      summary: Logout current session
      operationId: logout
      description: |
        Logout from current session
      security:
        - refreshToken: []
      responses:
        '200':
          description: Successfully logged out
          headers:
            Set-Cookie:
              $ref: '#/components/headers/clearCookieAccessToken'
            "\0Set-Cookie":
              $ref: '#/components/headers/clearCookieRefreshToken'
        '401':
          $ref: '#/components/responses/unauthorized'
  /auth/logout/other-sessions:
    delete:
      tags:
        - Auth
      summary: Logout other sessions
      operationId: logoutOtherSessions
      description: |
        Logout from all other sessions, except for current session
      security:
        - refreshToken: []
      responses:
        '200':
          description: Successfully logged out from other sessions
        '401':
          $ref: '#/components/responses/unauthorized'
  /auth/renew:
    get:
      tags:
        - Auth
      summary: Renew AccessToken
      operationId: renewAccessToken
      description: |
        Renew expired access token using refresh token
      security:
        - refreshToken: []
      responses:
        '200':
          description: Successfully refreshed access token
          headers:
            Set-Cookie:
              $ref: '#/components/headers/setCookieAccessToken'
        '401':
          $ref: '#/components/responses/unauthorized'
components:
  securitySchemes:
    idPassword:
      type: http
      scheme: basic
      description: >
        Basic Authentication will be used to **retrieve tokens**.


        For security reasons, the maximum number of trying signin will be
        limited.

        If user failed to login 5 consecutive times, the account will be
        locked.  


        It requires `Authorization` headers that contains the word `Basic`
        followed by a space and a base65-encoded string `username:password`.
    accessToken:
      type: apiKey
      in: cookie
      name: X-ACCESS-TOKEN
      description: >
        Access token will be used to **authenticate/authorize user to use the
        API**.
    refreshToken:
      type: apiKey
      in: cookie
      name: X-REFRESH-TOKEN
      description: >
        Refresh token will be used to **renew expired access token**.

        If the refresh token also expired, the user need to login again by using
        basic authentication.
  headers:
    setCookieAccessToken:
      description: |
        Set AccessToken
      schema:
        type: string
        readOnly: true
        example: >-
          X-ACCESS-TOKEN=abcdef1234; Domain=bshs.or.kr; Path=/api/v1; Secure;
          HttpOnly; SameSite=Strict; Expires=<Expire Date>
    setCookieRefreshToken:
      description: |
        Set RefreshToken
      schema:
        type: string
        readOnly: true
        example: >-
          X-REFRESH-TOKEN=abcdef1234; Domain=bshs.or.kr; Path=/api/v1/auth;
          Secure; HttpOnly; SameSite=Strict; Expires=<Expire Date>
    clearCookieAccessToken:
      description: |
        Clear AccessToken
      schema:
        type: string
        readOnly: true
        example: X-ACCESS-TOKEN=;
    clearCookieRefreshToken:
      description: |
        Clear RefreshToken
      schema:
        type: string
        readOnly: true
        example: X-REFRESH-TOKEN=;
  responses:
    unauthorized:
      description: Authentication information is missing or invalid
