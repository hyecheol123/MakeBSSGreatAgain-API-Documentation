openapi: 3.0.3
info:
  version: 1.0.0
  title: Make BSS Great Again (bshs.or.kr)
  license:
    name: BSD-3-Clause
    url: 'https://opensource.org/licenses/BSD-3-Clause'
  termsOfService: 'https://bshs.or.kr/terms/'
  contact:
    email: hyecheol123@gmail.com
    url: 'http://bshs.or.kr/contact'
  x-logo:
    url: 'https://redocly.github.io/openapi-template/logo.png'
  description: >-
    This is the tentative API specification for **Busan Science High School
    Alumni Website, *Make BSS Great Again***.

    Note that this project does not have any official relationship between Busan
    Science High School.

    Therefore, if you have any questions/suggestions/complaints, please contact
    our team with the email or contact information listed above.


    # Get Started

    All API calls require secured connection (only HTTPS).

    To use the APIs, the users need to retrieve access token by signin with
    username and password (basic authentication).

    As of now, we do not support multi-factor authentication, but before we
    service the application/website MFA will be supported.


    Details of the Security Schemes are described below.


    # SecuritySchemes

    <SecurityDefinitions />
externalDocs:
  description: GitHub repository for this API Documentation.
  url: 'https://github.com/hyecheol123/MakeBSSGreatAgin_API_Documentation'
tags:
  - name: Auth
    description: Authorization/Authentication operations
  - name: User
    description: User account related operations
  - name: Board
    description: Writing/Posting operations
servers:
  - url: 'https://bshs.or.kr/api/v1'
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      operationId: login
      description: |
        Login with username and password to retrieve access/refresh tokens
      security:
        - idPassword: []
      responses:
        '200':
          description: Successfully signed in
          headers:
            Set-Cookie:
              $ref: '#/components/headers/setCookieAccessToken'
            "\0Set-Cookie":
              $ref: '#/components/headers/setCookieRefreshToken'
        '401':
          $ref: '#/components/responses/unauthorized'
  /auth/logout:
    delete:
      tags:
        - Auth
      summary: Logout current session
      operationId: logout
      description: |
        Logout from current session
      security:
        - refreshToken: []
      responses:
        '200':
          description: Successfully logged out
          headers:
            Set-Cookie:
              $ref: '#/components/headers/clearCookieAccessToken'
            "\0Set-Cookie":
              $ref: '#/components/headers/clearCookieRefreshToken'
        '401':
          $ref: '#/components/responses/unauthorized'
  /auth/logout/other-sessions:
    delete:
      tags:
        - Auth
      summary: Logout other sessions
      operationId: logoutOtherSessions
      description: |
        Logout from all other sessions, except for current session
      security:
        - refreshToken: []
      responses:
        '200':
          description: Successfully logged out from other sessions
        '401':
          $ref: '#/components/responses/unauthorized'
  /auth/renew:
    get:
      tags:
        - Auth
      summary: Renew Access/Refresh Tokens
      operationId: renewToken
      description: |
        Renew expired access token using refresh token.
        Renew refresh token if it about to expire.
      security:
        - refreshToken: []
      responses:
        '200':
          description: Successfully refreshed tokens
          headers:
            Set-Cookie:
              $ref: '#/components/headers/setCookieAccessToken'
            "\0Set-Cookie":
              $ref: '#/components/headers/setCookieRefreshToken'
        '401':
          $ref: '#/components/responses/unauthorized'
  /user:
    post:
      tags:
        - User
      summary: Create new user
      operationId: newUser
      description: >
        Create a new user account.


        Need username and password to access the account, admission year, name
        in both Korean and English, and email.


        User can also provide mobile phone number.

        Email will be verified after the creation of the account, while the
        phone number will not be verified.
      requestBody:
        required: true
        content:
          appication/json:
            schema:
              $ref: '#/components/schemas/newAccount'
      responses:
        '200':
          description: New User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/username'
        '400':
          $ref: '#/components/responses/missingField'
  /user/verify-email:
    post:
      tags:
        - User
      summary: Send email verify link
      operationId: sendEmailVerifyTicket
      description: >
        Issue verification ticket and send it to the email in order to verify
        email of newly created user and changed email of existing user.

        Used to get new verification ticket as after calling [new account
        creation API](#operation/newUser) and [user information update API]() 

        will trigger verification process automatically and send the
        verification ticket to the provided email.


        Need email address to be verified
      security:
        - accessToken: []
      requestBody:
        required: true
        content:
          appication/json:
            schema:
              $ref: '#/components/schemas/email'
      responses:
        '201':
          description: New verification ticket created and sent to the email
        '400':
          $ref: '#/components/responses/missingField'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          description: Provided email does not exist in the user's profile
  '/user/verify-email/{ticketID}':
    put:
      tags:
        - User
      summary: Veify user's email
      operationId: verifyEmail
      description: >
        Verify email with the provided veify ticket/link generated by [send
        email verify link API](#operation/sendEmailVerifyTicket).

        This API require ticketID (provided as path parameter).
      security:
        - accessToken: []
      parameters:
        - $ref: '#/components/parameters/emailVerifyTicket'
      responses:
        '201':
          description: Email Verified
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          description: Cannot find the verify ticket
  /user/find-username:
    get:
      tags:
        - User
      summary: Find username
      operationId: findUsername
      description: >
        Find username by using email, name, and admission year.


        If the user with matching information found, the part of the username
        (first three and last two characters) will be returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usernameSearchForm'
      responses:
        '200':
          description: Found user with give information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/username'
              examples:
                gildong123:
                  summary: Account having username `gildong123`
                  value:
                    username: gil*****23
        '400':
          $ref: '#/components/responses/missingField'
        '404':
          description: Cannot find user with provided information
  /user/find-username/email:
    post:
      tags:
        - User
      summary: Send username to email
      operationId: sendUsernameEmail
      description: >
        Find and send username by using email, name, admission year, and search
        result of [find-username API](/#operation/findUsername).


        If the user with matching information found, the email containing
        username will send.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usernameEmailForm'
      responses:
        '201':
          description: Username email successfully requested
        '400':
          $ref: '#/components/responses/missingField'
        '404':
          description: Cannot find user with provided information
  /user/password-reset:
    post:
      tags:
        - User
      summary: Send password reset link
      operationId: sendPasswordResetLink
      description: >
        Send password reset link (ticketID) to user's email having matching
        name, username, email, and admission year information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passwordResetRequestForm'
      responses:
        '201':
          description: Password reset link has been successfully requested
        '400':
          $ref: '#/components/responses/missingField'
        '404':
          description: Cannot find user with provided information
  '/user/password-reset/{ticketID}':
    put:
      tags:
        - User
      summary: Reset password
      operationId: resetPassword
      description: >
        Reset password with the reset ticket/link generated by [send password
        reset link API](/#operation/sendPasswordResetLink).

        This API require ticketID (provided as path parameter), username and new
        password.
      parameters:
        - $ref: '#/components/parameters/passwordResetTicket'
      requestBody:
        required: true
        content:
          appication/json:
            schema:
              $ref: '#/components/schemas/passwordResetForm'
      responses:
        '201':
          description: Password successfully changed
        '400':
          $ref: '#/components/responses/missingField'
        '404':
          description: Cannot find user or password reset ticket with given information
  /board:
    post:
      tags:
        - Post
  /board/additional/hide:
    hide:
      $ref: paths/board/additional/hide.yaml
  /board/additional/report/:
    report:
      $ref: paths/board/additional/report.yaml
  /board/content/delete:
    delete:
      tags:
        - Post
components:
  securitySchemes:
    idPassword:
      type: http
      scheme: basic
      description: >
        Basic Authentication will be used to **retrieve tokens**.


        For security reasons, the maximum number of trying signin will be
        limited.

        If user failed to login 5 consecutive times, the account will be
        locked.  


        It requires `Authorization` headers that contains the word `Basic`
        followed by a space and a base64-encoded string `username:password`.
    accessToken:
      type: apiKey
      in: cookie
      name: X-ACCESS-TOKEN
      description: >
        Access token will be used to **authenticate/authorize user to use the
        API**.
    refreshToken:
      type: apiKey
      in: cookie
      name: X-REFRESH-TOKEN
      description: >
        Refresh token will be used to **renew expired access token**.

        If the refresh token also expired, the user need to login again by using
        basic authentication.
  headers:
    setCookieAccessToken:
      description: |
        Set AccessToken
      schema:
        type: string
        readOnly: true
        example: >-
          X-ACCESS-TOKEN=abcdef1234; Domain=bshs.or.kr; Path=/api/v1; Secure;
          HttpOnly; SameSite=Strict; Expires=<Expire Date>
    setCookieRefreshToken:
      description: |
        Set RefreshToken
      schema:
        type: string
        readOnly: true
        example: >-
          X-REFRESH-TOKEN=abcdef1234; Domain=bshs.or.kr; Path=/api/v1/auth;
          Secure; HttpOnly; SameSite=Strict; Expires=<Expire Date>
    clearCookieAccessToken:
      description: |
        Clear AccessToken
      schema:
        type: string
        readOnly: true
        example: X-ACCESS-TOKEN=;
    clearCookieRefreshToken:
      description: |
        Clear RefreshToken
      schema:
        type: string
        readOnly: true
        example: X-REFRESH-TOKEN=;
  responses:
    unauthorized:
      description: Authentication information is missing or invalid
    missingField:
      description: At least one required value is not provided
  schemas:
    phoneNumber:
      type: object
      properties:
        countryCode:
          type: integer
          format: int32
        number:
          type: string
      required:
        - countryCode
        - number
      example:
        countryCode: 82
        number: 1012345678
    newAccount:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        admissionYear:
          type: integer
          format: int32
          minimum: 2002
        name-korean:
          type: string
        name-english:
          type: string
        email:
          type: string
          format: email
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
      required:
        - username
        - password
        - admissionYear
        - name-korean
        - name-english
        - email
      example:
        username: gildong123
        password: thisispassword
        admissionYear: 2015
        name-korean: 홍길동
        name-english: Gildong Hong
        email: gildong.hong@example.com
        phoneNumber:
          countryCode: 82
          number: 1012345678
    username:
      type: object
      properties:
        username:
          type: string
      required:
        - username
      example:
        username: gildong123
    email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
      example:
        email: gildong.hong@example.com
    usernameSearchForm:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        admissionYear:
          type: integer
          format: int32
          minimum: 2002
      required:
        - name
        - email
        - admissionYear
      example:
        name: 홍길동
        email: gildong.hong@example.com
        admissionYear: 2015
    usernameEmailForm:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        admissionYear:
          type: integer
          format: int32
          minimum: 2002
        maskedUsername:
          type: string
      required:
        - name
        - email
        - admissionYear
        - maskedUsername
      example:
        name: 홍길동
        email: gildong.hong@example.com
        admissionYear: 2015
        maskedUsername: gil*****23
    passwordResetRequestForm:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        admissionYear:
          type: integer
          format: int32
          minimum: 2002
        username:
          type: string
      required:
        - name
        - email
        - admissionYear
        - username
      example:
        name: 홍길동
        email: gildong.hong@example.com
        admissionYear: 2015
        username: gildong123
    passwordResetForm:
      type: object
      properties:
        username:
          type: string
        newPassword:
          type: string
      required:
        - username
        - newPassword
      example:
        username: gildong123
        newPassword: thisisnewpassword
  parameters:
    emailVerifyTicket:
      name: ticketID
      in: path
      description: >-
        ticketID that has been generated by [send email verify link
        API](/#operation/sendEmailVerifyTicket).
      required: true
      schema:
        type: string
    passwordResetTicket:
      name: ticketID
      in: path
      description: >-
        ticketID that has been generated by [send password reset link
        API](/#operation/sendPasswordResetLink).
      required: true
      schema:
        type: string
